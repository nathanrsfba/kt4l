#!/usr/bin/python3

import json
import random
import sys
from pathlib import Path
import argparse

import mutagen
from mutagen.easyid3 import EasyID3

import selector

# How you know a python coder started out life coding C...
def main():
    path = Path( __file__ ).absolute().parent.parent

    parser = argparse.ArgumentParser( description='Select the next song to play' )
    parser.add_argument( 
                        '-s', '--state', 
                        default=path / 'configs' / 'state.json',
                        help="Path to file to save state in between calls"
                        )
    parser.add_argument( 
                        '-l', '--library', 
                        default=path / 'library',
                        help="Path to music library"
                        )
    args = parser.parse_args()

    library = Path( args.library )
    statepath = Path( args.state )

    try:
        with open( statepath ) as fp:
            state = json.load( fp )
    except FileNotFoundError:
        state = {}

    state.setdefault( 'version', 1 )
    state.setdefault( 'time', 0 )
    state.setdefault( 'files', {} )

    removes = {} # Files formerly in library that no longer exist
    adds = {}    # Files just added to library

    for file in list( state['files'].keys() ):
        path = library / file
        if not path.exists(): 
            perror( f"Removing {file}" )
            removes[str( path.name )] = state['files'][file]
            del state['files'][file]

    # perror( removes )

    # Load the library
    files = getFiles( library )


    for file in files:
        sfile = str( file )
        path = library / file
        if sfile not in state['files']:
            if str( file.name ) in removes:
                perror( f"Moving {file}" )
                state['files'][sfile] = removes[str( file.name )]
                state['files'][sfile]['folders'] = file.parent.parts
            else:
                perror( f"Adding {file}" )
                state['files'][sfile] = {
                    'lastplay': None,
                    'added': state['time'],
                    'folders': file.parent.parts,
                    'modified': path.stat().st_mtime
                    } 
                state['files'][sfile].update( mp3Info( path ))
                    
        elif( 'modified' not in state['files'][sfile] or
             state['files'][sfile]['modified'] < path.stat().st_mtime ):
            perror( f"Updating {file}" )
            state['files'][sfile].update( mp3Info( path ))
            state['files'][sfile]['modified'] = path.stat().st_mtime


    # perror( json.dumps( state, indent=2 ))

    perror( f"Time is {state['time']}" )

    selection = selectTrack( state )

    selector.postSelect( selection, state )

    state['files'][selection]['lastplay'] = state['time']
    state['time'] += state['files'][selection]['len']

    # Write the state file

    with open( statepath, 'w' ) as fp:
        json.dump( state, fp, indent=2 )

    print( library / selection )

def getFiles( base, sub=Path() ):
    base = Path( base )
    current = base
    files = []

    current = current / sub
    files.extend( [sub / x.name for x in current.glob( "*.mp3" )] )
    for dir in [x for x in current.glob( "*/" ) if x.is_dir()]:
        path = sub / dir.name
        files.extend( getFiles( base, path ))

    return files
    
def selectTrack( state ):
    selector.preSelect( state )
    tracks = {}
    weights = {}
    for file, info in state['files'].items():
        (pri, weight) = selector.weighTrack( file, state )
        # perror( f"{file}: {pri}.{weight}" )
        tracks.setdefault( pri, [] ).append( file )
        weights.setdefault( pri, [] ).append( weight )

    pris = list( tracks.keys() )
    pris.sort()
    toppri = pris[0]

    selection = random.choices( tracks[toppri], weights[toppri] )[0]
    return selection

def mp3Info( f ):
    """Get information on an MP3 in dict form"""

    info = {}
    try:
        id3 = mutagen.File( f )

        for key in id3.keys():
            if 'text' in dir( id3[key] ):
                info[key] = str( id3[key].text[0] )
        info['len'] = float( id3.info.length )
    except Exception as e:
        perror( e )

    try:
        id3 = EasyID3( f )
        for key in id3.keys():
            info[key] = str( id3[key][0] )
    except Exception as e:
        perror( e )

    return info

def perror( *args ):
    print( *args, file=sys.stderr )
    
if __name__ == "__main__":
    # print( mp3Info( 'library/music/misc/X-It.mp3' ))
    main()

