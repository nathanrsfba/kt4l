#!/usr/bin/python3

import json
import argparse
from pathlib import Path

import fasteners

def main():
    # Figure out the root of the 'radio' directory (assumes this script is
    # located in the 'tools' directory of said directory) to work out default
    # paths
    path = Path( __file__ ).absolute().parent.parent

    parser = argparse.ArgumentParser( description=
                                     'Queue a song to play' )
    parser.add_argument( '-s', '--state', 
                        default=path / 'configs' / 'state.json',
                        help="Path to file to save state in between calls")
    parser.add_argument( '-r', '--remove', 
                        action='store_true',
                        help="Remove an item from the queue")
    parser.add_argument( '-l', '--list', 
                        action='store_true',
                        help="List matches without altering queue")
    parser.add_argument( '-p', '--position',
                        help="Position to insert into queue at")
    parser.add_argument( '-m', '--move',
                        help="Move track to position")
    parser.add_argument( '-A', '--artist',
                        nargs='*', action='extend', default=[],
                        help='Search artist field for keyword')
    parser.add_argument( '-T', '--title',
                        nargs='*', action='extend', default=[],
                        help='Search title field for keyword')
    parser.add_argument( '-L', '--album',
                        nargs='*', action='extend', default=[],
                        help='Search album field for keyword')
    parser.add_argument( '-X', '--exclude',
                        nargs='*', action='extend', default=[],
                        help='Exclude tracks containing keyword')
    parser.add_argument( 'keywords',
                        nargs='*',
                        help="Keywords of track to queue")
    args = parser.parse_args()
    print( args )
    exit()

    statepath = Path( args.state )
    lockpath = statepath.with_name( statepath.name + ".lock" )
    lock = fasteners.InterProcessLock( lockpath )

    with lock:
        try:
            with open( statepath ) as fp:
                state = json.load( fp )
        except FileNotFoundError:
            state = {}

        queue = state.setdefault( 'queue', [] )

        if( not args.keywords and not args.artist and 
           not args.title and not args.album ):
            for i in range( len( queue )):
                info = state['files'][queue[i]]
                print( f"{len( queue ) - i}: {info['artist']}: {info['title']}" )
            return 0

        if( args.move or args.remove and
            (len( args.keywords ) == 1 and args.keywords[0].isdecimal()) ):
            index = int( args.keywords[0] )
            if index > len( state['queue'] ):
                print( f"Position out of range: {index}" )
                return 1
            sel = state['queue'][-index]
        else:
            sel = []
            for file in state['files']:
                info = state['files'][file]

                if not findKeywords( info, ('artist', 'album', 'title'), 
                                   args.keywords ): continue
                if not findKeywords( info, ('artist',), args.artist ): continue
                if not findKeywords( info, ('title',), args.title ): continue
                if not findKeywords( info, ('album',), args.album ): continue
                if( args.exclude and 
                   findKeywords( info, ('artist', 'album', 'title'), 
                                   args.exclude )): continue

                if not state['files'][file]['skip']:
                    if not args.remove and not args.move:
                        sel.append( file )
                    else:
                        if file in queue:
                            sel.append( file )

            if len( sel ) > 1 or args.list:
                if not args.list:
                    print( "Multiple matching items:" )
                for item in sel:
                    info = state['files'][item]
                    print( f"{info['artist']}: {info['title']}" )
                if args.list: return 0
                return 1
            if len( sel ) == 0:
                print( "No matches" )
                return 1

            sel = sel[0]
        info = state['files'][sel]
        if info['follow']:
            print( "Found part of group -- finding start..." )
            while info['follow']:
                sel = (state['trackindex']
                       [info['artist']]
                       [info['album']]
                       [info['track'] - 2])
                info = state['files'][sel]

        title = f"{info['artist']}: {info['title']}"

        if (args.remove or args.move) and (sel not in queue):
            print( f'Not in queue: {title}' )
            return 1
        elif args.remove:
            print( f'Removing: {title}' )
            queue.remove( sel )
        elif args.move:
            print( f"Moving to position {args.move}: {title}" )
            queue[queue.index( sel )] = None
            if int( args.move ) == 0:
                queue.append( sel )
            else:
                queue.insert( -int( args.move ), sel )
            queue.remove( None )
                
        elif sel in queue:
            print( f"Already in queue: {title}" )
            return 1
        elif args.position:
            print( f"Queueing at position {args.position}: {title}" )
            queue.insert( -int( args.position ), sel )
        else:
            print( f"Queueing: {title}" )
            queue.append( sel )

        # Write the state file

        with open( statepath, 'w' ) as fp:
            json.dump( state, fp, indent=2 )

        return 0

def findKeywords( info, fields, words ):
    """Find a set of keywords in a dict.

    Searches the dict 'info', checking keys in the list 'fields', for the words
    in the list 'words', case insensitive. All words must be found in at least
    one field to return a match.
    """

    for word in words:
        word = word.lower()
        found = False
        for key in fields:
            if (info[key] or '').lower().find( word ) != -1: found = True
        if not found: return False
    return True

if __name__ == "__main__":
    exit( main() )


