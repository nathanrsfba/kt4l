#!/bin/bash

# Time in seconds to poll for status
TIMEOUT=10

# Get base directory

dir="`realpath "$0"`"
dir="`dirname "$dir"`"
dir="`dirname "$dir"`"

cd "$dir"
title="Radio Manager: $dir"

TMP="`mktemp`"
TMP2="`mktemp`"

# Print each of argument $2-, each preceeded by $1, all separated by newlines
optarg() {
    opt=$1
    shift
    for arg in "$@"; do
        echo "$opt"
        echo "$arg"
    done
}

echoq() {
    for arg in "$@"; do
        echo -n "$arg|"
    done
    echo
}

# Show dialog to add file to queue
addfile() {
    # Field width
    FW=40
    # Input width
    IW=80
    # Field horizontal position
    FX=15

    keywords=''
    title=''
    artist=''
    album=''
    exclude=''
    out=''

    local msg
    local out
    msg="Add to queue:"
    out="$msg"
    while true; do
        dialog \
            --title "$title" \
            --form "$out" 0 0 5 \
            Keywords 1 1 "$keywords" 1 $FX $FW $IW \
            Title 2 1 "$title" 2 $FX $FW $IW \
            Artist 3 1 "$artist" 3 $FX $FW $IW \
            Album 4 1 "$album" 4 $FX $FW $IW \
            Exclude 5 1 "$exclude" 5 $FX $FW $IW \
            2>"$TMP"

        if [ $? != 0 ]; then
            return 1
        fi

        { 
            read keywords 
            read title 
            read artist 
            read album 
            read exclude
        } < "$TMP"

        tools/queue $keywords `optarg -A $artist` `optarg -T $title` \
            `optarg -L $album` `optarg -X $exclude` > "$TMP2"
        if [ $? = 0 ]; then
            return 0
        fi

        out="`head -5 "$TMP2";echo;echo "$msg"`"
    done

}

# Massage queue output into menu options
queuemenu() {
    while read track; do
        num=${track%%: *}
        title=${track#*: }
        echo $num
        if [ "$1" != "" ]; then
            echo -n "$*"
        fi
        echo $title
    done
}

editqueue() {
    local msg
    local out
    msg="Edit Queue:"
    out="$msg"
    while true; do
        tools/queue > "$TMP"
        (
        IFS=$'\n' 
        dialog \
            --title "$title" \
            --default-item Add \
            --cancel-label Back \
            --menu "Edit queue:" 20 70 12 \
            `queuemenu < "$TMP"` \
            Add "Add track to queue" \
            2> "$TMP2"
        )
        if [ $? != 0 ]; then
            cat "$TMP2"
            return 1
        fi

        result=`cat "$TMP2"`
        case $result in
            [0-9]*)
                edittrack $result 2> "$TMP2"
                if [ $? != 0 ]; then
                    dialog --msgbox "`cat "$TMP2"`" 10 70
                fi
                ;;
            Add)
                addfile
                ;;
        esac
    done



}

edittrack() {
    track=$1
    (
    IFS=$'\n' 
    dialog \
        --title "$title" \
        --menu "Edit entry:" 20 70 12 \
        `queuemenu "Move before: " < "$TMP"` \
        End "Move to end" \
        Remove "Remove track from queue" 2> "$TMP2"
    ) || return 1

    result=`cat "$TMP2"`

    case $result in
        [0-9]*)
            tools/queue -m $result $track 1>&2 || return 1
            ;;
        End)
            tools/queue -m 0 $track 1>&2 || return 1
            ;;
        Remove)
            tools/queue -r $track 1>&2 || return 1
            ;;
    esac

}

# Edit the queue, or show the add screen if empty
addedit() {
    tools/queue > "$TMP"
    if [ -s "$TMP" ]; then
        editqueue
    else
        addfile && editqueue
    fi
}

# Get server stats
status() {
    response=0
    tools/launch status > "$TMP"
    if [ $? != 0 ]; then
        cat "$TMP"
        response=1
    else
       echo "Currently playing:"
       tools/getmeta 

       tools/queue > "$TMP"
       if [ -s "$TMP" ]; then
           echo "Up next:"
           head -3 "$TMP"
       fi
    fi
    return $response
}

# Generate the dialog menu options for the main menu
mainmenuitems() {
    running=$1

    echo Queue; echo "Edit queue"
    echo Update; echo "Update database"

    if [ $running = 0 ]; then
        echo Next; echo "Skip to next track"
    fi

    if [ `siblings | wc -l` != 0 ]; then
        echo Switch; echo "Switch to a sister station"
    fi
     
    if [ $running = 0 ]; then
        echo Restart; echo "Restart server"
        echo Stop; echo "Stop server"
    else
        echo Start; echo "Start server"
    fi

}

switchitems() {
    (
    IFS=$'\n'
    for stat in `siblings`; do
        echo "$stat"
        echo "Switch to $stat"
    done
    )
}


switchmenu() {
    (
    IFS=$'\n'
    dialog \
        --title "$title" \
        --menu "Switch to:" 0 0 5 \
        `switchitems` \
        2> "$TMP"
    ) || return

    sel="`cat "$TMP"`"
    cleanup
    exec ../"$sel"/tools/radman
    exit 1
}

mainmenu() {
    while true; do
        status > "$TMP2"
        running=$?

        (
        IFS=$'\n'
        dialog --cancel-label Exit \
            --title "$title" \
            --timeout $TIMEOUT \
            --menu "`cat "$TMP2"`"  0 0 6 \
            `mainmenuitems $running` \
            2> "$TMP"
        )

        case $? in
            0) ;;
            1) return ;;
            *) continue ;;
        esac

        case `cat "$TMP"` in
            Start) 
                (set -m ; tools/launch | dialog --title "$title" \
                    --programbox "Starting server..." 20 60)
                ;;
            Restart)
                (set -m ; tools/launch restart | dialog --title "$title" \
                    --programbox "Restarting server..." 20 60)
                ;;
            Stop) tools/launch stop | dialog --title "$title" \
                    --programbox "Stopping server..." 20 60
                ;;
            Queue) addedit ;;
            Update) update ;;
            Next) tools/reject ;;
            Switch) switchmenu ;;
        esac



    done

}

# Update the library
update() {
    {
        if [ -x tools/linksdirs ]; then
            echo "Scanning for new additions..."
            tools/linkdirs 2>&1
        fi
        echo "Updating database..."
        tools/nextrak -u 2>&1
    } | dialog --title "$title" \
        --programbox "Updating library..." 20 60

}

# Get a list of sibling stations
siblings() {
    dir="`pwd`"
    dir="`basename "$dir"`"
    this="$dir"

    for mgr in ../*/tools/radman; do
        if [ -x "$mgr" ]; then
            dir="`dirname "$mgr"`"
            dir="`dirname "$dir"`"
            dir="`basename "$dir"`"
            if [ "$dir" != "$this" ]; then
                echo "$dir"
            fi
        fi
    done
}

cleanup() {
    rm -f "$TMP" "$TMP2"
}

mainmenu # status # addedit
cleanup
