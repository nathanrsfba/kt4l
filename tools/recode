#!/usr/bin/python3

"""Decode an MP3 file with effects applied.

This will decode the file given on the command line to a raw PCM file, applying
effects to it, using Madplay and Sox.

The file is examined for certain ID3 tags that tell it what effects to apply.
These are TXXX flags with the folling descriptions:

Start: The time point in the track to begin rendering. Or, alternately stated,
    the amount of time at the start of the file to skip. This can be given as
    (fractional) seconds, or in MM:SS format.
End: The time point to stop rendering. This can be either be either an absolute
    time (again, as seconds, or MM:SS), or can be a negative number of seconds,
    in which that many seconds are removed from the end.
FadeIn: Number of seconds to fade in a the start
FadeOut: Number of seconds to fade out at the end

The 'settings' class determines the format to decode to, and any additional Sox
effects to apply to the output.
"""

import sys
from pathlib import Path
from subprocess import Popen, check_output, PIPE

import mutagen

def parseTime( t ):
    """Convert a time in [[MM]:]SS format to seconds"""
    sec = 0.0
    for i in t.split( ":" ): sec = sec * 60 + float( i or 0 )
    return sec

class settings:
    rate = 44010    # Sample rate to decode to
    width = 16      # Bits per sample
    channels = 2    # Channels (mono/stereo)
    fmt = "signed-integer"  # Sample format

    # Sox effects to apply to all tracks
    fx = ["compand", "0.3,1", "-90,-90,-70,-70,-60,-20,0,0", "-5", "0", "0.2"]

filename = sys.argv[1]
path = Path( filename )
playlist = path.parent / "playlist.txt"
if playlist.exists():
    with open( playlist ) as f:
        files = f.read().splitlines()
    playlist.unlink()
else:
    files = [filename]

length = 0.0 # Track duration in seconds
for file in files:
    fileinfo = mutagen.File( file )
    length += float( fileinfo.info.length ) 

fileinfo = mutagen.File( files[0] )
start = parseTime( fileinfo['TXXX:Start'][0] ) if 'TXXX:Start' in fileinfo else None
fadein = float( fileinfo['TXXX:FadeIn'][0] ) if 'TXXX:FadeIn' in fileinfo else None

fileinfo = mutagen.File( files[-1] )
end = parseTime( fileinfo['TXXX:End'][0] ) if 'TXXX:End' in fileinfo else None
fadeout = float( fileinfo['TXXX:FadeOut'][0] ) if 'TXXX:FadeOut' in fileinfo else None

if (end or 0) < 0: 
    end += length
elif end:
    end = end + length - fileinfo.info.length

# Setup and call the decoder
args = ["mpg123", 
        # "-b", str( settings.width ),
        "-r", str( settings.rate ),
        "--stereo" if settings.channels == 2 else "-m"]

fstart = None
if start:
    fstart = start * 44100 / 1152
    args.extend( ['-k', str( fstart )] )
if end:
    fend = end * 44100 / 1152
    # Does endtime include skipped frames or not?
    args.extend( ['-n', str( fend - (fstart or 0) )] )


args.extend( [
    '--continue',
    "-s" ] )

args.extend( files )

print( args, file=sys.stderr )

decoder = Popen( args, stdout=PIPE )

# Setup and call the effects processor

args = ["sox",
        "-t", "raw", 
        "-r", str( settings.rate ),
        "-b", str( settings.width ),
        "-e", str( settings.fmt ),
        "-c", str( settings.channels ),
        "-",
        "-t", "raw", 
        "-r", str( settings.rate ),
        "-b", str( settings.width ),
        "-e", str( settings.fmt ),
        "-c", str( settings.channels ),
        "-"]

args.extend( settings.fx )

if fadein or fadeout:
    args.extend( ["fade", 'h', str( fadein or 0 )] )
    if fadeout:
        # Sox needs to know the running time in order to fade out
        # when streaming from stdin
        if end:
            time = end - (start or 0)
        else:
            time = length - (start or 0)
        args.extend( [str( time ), str( fadeout )] )

# print( args, file=sys.stderr )

proc = Popen( args, stdin=decoder.stdout ) # , stdout=PIPE )
proc.wait()

# args = ["play", 
#         "-t", "raw", 
#         "-r", str( settings.rate ),
#         "-b", str( settings.width ),
#         "-e", str( settings.fmt ),
#         "-c", str( settings.channels ),
#         "-"]
# 
# player = Popen( args, stdin=proc.stdout )

# player.wait()
# 
